/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
"use client";
import React, { useRef, useState, memo } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from 'three'
import { easing } from 'maath'

const Imposter = memo(function Imposter(props) {
  const { nodes, materials } = useGLTF('/models/imposter-transformed.glb');

  const modelRef = useRef();
  const [dummy] = useState(() => new THREE.Object3D())
  useFrame((state, dt) => {
    dummy.lookAt(state.pointer.x, state.pointer.y, 1)
    easing.dampQ(modelRef.current.quaternion, dummy.quaternion, 0.15, dt)
  })

  return (
    <group {...props} dispose={null}
    scale={[5,5,5]}
    position={[0, 0, 0]}
    ref={modelRef}>
      <group position={[0, 0, 0]} rotation={[-Math.PI / 2, 0, Math.PI]} scale={[50, 50, 50]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Imposter_1.geometry}
          material={materials.Body}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Imposter_2.geometry}
          material={materials.Goggles}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Imposter_3.geometry}
          material={materials.Black}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Imposter_4.geometry}
          material={materials.MouthInside}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Imposter_5.geometry}
          material={materials.White}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Imposter_6.geometry}
          material={materials.Tongue}
        />
      </group>
    </group>
  )
});

export default Imposter;

useGLTF.preload('/models/imposter-transformed.glb')